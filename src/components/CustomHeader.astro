---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE } from '../consts';

interface Link {
  href: string;
  text: string;
}

const links: Link[] = [
  {
    href: '/',
    text: 'home',
  },
  {
    href: '/about',
    text: 'about'
  },
  {
    href: '/blog',
    text: 'blog'
  }
]
---
<custom-header class="w-full fixed top-0">
  <div class="bg-fit bg-[url('/grid.svg')]">
  <header class="
    p-4
    border-b
    border-double
    border-slate-900
    bg-gradient-to-tr from-black to-transparent
    font-['dm']
    max-w-full
  ">
    <h2 class="text-4xl text-black mt-0! mb-2">
      {SITE_TITLE}
    </h2>
    
    <nav>
      { links.map((link) => <HeaderLink class="mr-4"href={link.href}>{link.text}</HeaderLink> )}
    </nav>
  </header>
  </div>
</custom-header>
<script>
  import { $activeSet } from '../store.ts';

  class CustomHeader extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      const siteTitle = this.querySelector('h2') as HTMLHeadingElement;
      $activeSet.subscribe( (newSet, oldSet) => {
        if (oldSet && siteTitle.classList.contains(oldSet.text)) {
          siteTitle.classList.remove(oldSet.text);
        }
        siteTitle.classList.add(newSet.text);
      });

      const height = this.clientHeight; // get height of header
      const root = document.querySelector(':root') as HTMLElement;
      root.style.setProperty('--header-height', `${height}px`); // change root css var to reuse on body
    }
  }

  customElements.define('custom-header', CustomHeader);
</script>