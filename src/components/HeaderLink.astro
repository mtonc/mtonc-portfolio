---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const possibleHrefs = ['/', '/about', '/blog'];
const { href, ...props } = Astro.props as Props;
const { pathname } = Astro.url;
const index = pathname.indexOf('/', 1);
const endpoint = index === -1 ? pathname.length : index;
const subpath = pathname.substring(0, endpoint);
const isActive = possibleHrefs.includes(subpath) && subpath === href;
---
<header-link>
  <a
    href={href}
    class:list={[
      'inline-block',
      'hover:scale-125',
      'transition-transform',
      'text-black',
      'text-xl',
      [
        { 'active font-bold underline underline-offset-8': isActive },
        { 'font-medium no-underline': !isActive },
      ]
    ]}
    {...props}
  >
    <slot />
  </a>
</header-link>
<script>
 import { $activeSet } from "../store.ts";

  class HeaderLink extends HTMLElement {
    constructor() {
      super();
    }
    connectedCallback() {
      const a = this.querySelector('a') as HTMLAnchorElement;
      $activeSet.subscribe((newSet, oldSet) => {
        if (oldSet && a.classList.contains(oldSet.text)) {
          a.classList.remove(oldSet.text);
        }
        a.classList.add(newSet.text);
      });
      const { textContent } = a;
      a.textContent = textContent ? textContent.toUpperCase() : null;
    }
  }
  customElements.define('header-link', HeaderLink)
</script>